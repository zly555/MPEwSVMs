renv::init()
renv::snapshot()
renv::snapshot()
usethis::use_package(package = "renv", type = "Suggests")
usethis::use_package(package = "quadprog", type = "Imports")
usethis::use_package(package = "data.table", type = "Imports")
usethis::use_package(package = "MASS", type = "Imports")
usethis::use_package(package = "glmnet", type = "Imports")
usethis::use_package(package = "nnet", type = "Imports")
usethis::use_package(package = "randomForest", type = "Imports")
usethis::use_package(package = "tree", type = "Imports")
usethis::use_package(package = "xgboost", type = "Imports")
usethis::use_package(package = "dplyr", type = "Imports")
usethis::use_package(package = "tictoc", type = "Imports")
install.packages("rmarkdown")
usethis::use_readme_rmd()
devtools::document()
devtools::document()
devtools::document()
library(MPEwSVMs)
?wsvm
library(MPEwSVMs)
?wsvm
devtools::document()
usethis::use_package(package = "dplyr", type = "Imports")
devtools::document()
usethis::use_package("dplyr", "Suggests")
devtools::document()
devtools::document()
devtools::document()
library(MPEwSVMs)
?wsvm
#' @param V V matrix
#' @param kernel kernel params list.
#'               kernel$type = type of kernel
#'               (eg. 'linear', 'poly', 'rbf', 'nn')
#'               kernel$param = parameter of kernel
#'
#' @return
#' @export
#'
#' @examples
wsvm.kernel <- function(U, V, kernel = list(type = 'linear', param1 = NULL, param2 = NULL)) {
if(!is.matrix(U)) U <- as.matrix(U)
if(!is.matrix(V)) V <- as.matrix(V)
if (kernel$type == 'linear') K <- (U %*% t(V))
else if (kernel$type == 'poly') K <- (1 + kernel$param2 * U %*% t(V))^kernel$param1
else if (kernel$type == 'rbf'){
a = as.matrix(apply(U^2, 1, 'sum'))
b = as.matrix(apply(V^2, 1, 'sum'))
one.a = matrix(1, ncol = nrow(b))
one.b = matrix(1, ncol = nrow(a))
K1 = one.a %x% a
K2 = U %*% t(V)
K3 = t(one.b %x% b)
K = exp(-(K1 - 2 * K2 + K3))/(2*kernel$param1^2)
}
else if (kernel$type == 'nn') K <- tanh(kernel$param2 + (U %*% t(V))*kernel$param1)
return(K)
}
devtools::document()
library(MPEwSVMs)
?wsvm.kernel
devtools::document()
library(MPEwSVMs)
?wsvm.kernel
devtools::document()
library(MPEwSVMs)
?argmax
devtools::document()
library(MPEwSVMs)
?data_one2all
devtools::document()
library(MPEwSVMs)
?one2all.svm.probability
devtools::document()
library(MPEwSVMs)
?one2all.svm.probability
devtools::document()
library(MPEwSVMs)
?pairwise.svm.probability.linear.algorithm
library(MPEwSVMs)
